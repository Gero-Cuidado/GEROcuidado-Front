<testExecutions version="1">
<file path="src/app/__tests__/user.service.spec.tsx">
<testCase name="postUser deve fazer uma chamada de API bem-sucedida" duration="3" />
<testCase name="postUser deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="updateUser deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="updateUser deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="getUserById deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="getUserById deve lidar com uma chamada de API com erro" duration="0" />
<testCase name="deleteUserById deve fazer uma chamada de API bem-sucedida" duration="0" />
<testCase name="deleteUserById deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="loginUser deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="loginUser deve lidar com uma chamada de API com erro" duration="1" />
</file>
<file path="src/app/__tests__/forum.service.spec.tsx">
<testCase name="getAllPublicacao Get: deve fazer uma chamada de API bem-sucedida" duration="2" />
<testCase name="getAllPublicacao deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="postPublicacao Post: deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="postPublicacao deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="updatePublicacao deve fazer uma chamada de API bem-sucedida" duration="2" />
<testCase name="updatePublicacao deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="deletePublicacaoById deve fazer uma chamada de API bem-sucedida" duration="3" />
<testCase name="deletePublicacaoById deve lidar com uma chamada de API com erro" duration="1" />
</file>
<file path="src/app/__tests__/idoso.service.spec.tsx">
<testCase name="postIdoso deve fazer uma chamada de API bem-sucedida" duration="2" />
<testCase name="postIdoso deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="updateIdoso deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="updateIdoso deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="getAllIdoso Get: deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="getAllIdoso deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="deleteIdoso deve fazer uma chamada de API bem-sucedida" duration="0" />
<testCase name="deleteIdoso deve lidar com uma chamada de API com erro" duration="0" />
</file>
<file path="src/app/__tests__/rotina.service.spec.tsx">
<testCase name="postRotina deve fazer uma chamada de API bem-sucedida" duration="2" />
<testCase name="postRotina deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="updateRotina deve fazer uma chamada de API bem-sucedida" duration="0" />
<testCase name="updateRotina deve lidar com uma chamada de API com erro" duration="0" />
<testCase name="getAllRotina Get: deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="getAllRotina deve lidar com uma chamada de API com erro" duration="1" />
<testCase name="deleteRotina deve fazer uma chamada de API bem-sucedida" duration="1" />
<testCase name="deleteRotina deve lidar com uma chamada de API com erro" duration="1" />
</file>
<file path="src/app/__tests__/cadastro.spec.tsx">
<testCase name="Cadastro Component renderiza corretamente" duration="175" />
<testCase name="Cadastro Component deve chamar a fun&#xe7;&#xe3;o &apos;postUser&apos; quando n&#xe3;o h&#xe1; erros nos campos" duration="109" />
<testCase name="Cadastro Component n&#xe3;o deve chamar a fun&#xe7;&#xe3;o &apos;postUser&apos; quando h&#xe1; espec&#xed;ficos erros nos campos" duration="33" />
<testCase name="Cadastro Component n&#xe3;o deve chamar a fun&#xe7;&#xe3;o &apos;postUser&apos; quando h&#xe1; erros nos campos" duration="13" />
<testCase name="Cadastro Component n&#xe3;o deve chamar a fun&#xe7;&#xe3;o &apos;postUser&apos; quando h&#xe1; erros espec&#xed;ficos de nome nos campos" duration="15" />
<testCase name="Cadastro Component deve exibir o Toast de erro" duration="30" />
<testCase name="Cadastro Component deve alterar o estado do escondeSenha" duration="11" />
</file>
<file path="src/app/__tests__/cadastrarIdoso.spec.tsx">
<testCase name="CadastrarIdoso component renders correctly" duration="84" />
<testCase name="CadastrarIdoso component lidar com nome vazio " duration="30" />
<testCase name="CadastrarIdoso component lidar com nome com caracteres em excesso" duration="24" />
<testCase name="CadastrarIdoso component lidar com data de nascimento invalido no cadastro" duration="26" />
<testCase name="CadastrarIdoso component lidar com telefone responsavel invalido" duration="25" />
</file>
<file path="src/app/__tests__/editarPerfil.spec.tsx">
<testCase name="EditarPerfil component Atualiza nome com o input" duration="39" />
<testCase name="EditarPerfil component Exibe mensagem de erro ao tentar salvar com nome vazio" duration="14" />
<testCase name="EditarPerfil component Exibe mensagem de erro ao tentar salvar com nome muito curto" duration="15" />
<testCase name="EditarPerfil component Exibe mensagem de erro ao tentar salvar com nome muito longo" duration="11" />
<testCase name="EditarPerfil component N&#xe3;o exibe mensagem de erro ao salvar com nome v&#xe1;lido" duration="26" />
<testCase name="EditarPerfil component Exibe mensagem de confirma&#xe7;&#xe3;o ao apagar conta" duration="11" />
</file>
<file path="src/app/__tests__/image.helper.spec.tsx">
<testCase name="getImageUri deve retornar uma URI de imagem v&#xe1;lida para um Buffer fornecido" duration="1" />
<testCase name="getImageUri Imagem ja esta codificada" duration="0" />
<testCase name="getImageUri Imagem vazia" duration="0" />
</file>
<file path="src/app/__tests__/login.spec.tsx">
<testCase name="Login Component renderiza corretamente" duration="53" />
<testCase name="Login Component deve alterar o estado do escondeSenha" duration="14" />
<testCase name="Login Component deve lidar com o login com falha" duration="23" />
<testCase name="Login Component deve lidar com o login com falha na requisicao" duration="20" />
<testCase name="Login Component deve lidar com o login com sucesso" duration="70" />
</file>
<file path="src/app/__tests__/listarIdosos.spec.tsx">
<testCase name="ListarIdosos deve chamar a fun&#xe7;&#xe3;o de getAllIdoso ao montar o componente" duration="535" />
<testCase name="ListarIdosos deve exibir a lista de idosos ap&#xf3;s a conclus&#xe3;o da chamada da API" duration="23" />
</file>
<file path="src/app/__tests__/CardRotina.spec.tsx">
<testCase name="Testes para CardRotina deve renderizar corretamente" duration="27" />
<testCase name="Testes para CardRotina Card de exercicio" duration="5" />
<testCase name="Testes para CardRotina Card de medicamento" duration="5" />
<testCase name="Testes para CardRotina testa debounce" duration="12" />
</file>
<file path="src/app/__tests__/Publicacao.spec.tsx">
<testCase name="Publicacao deve renderizar o componente &apos;Publicacao&apos; corretamente" duration="26" />
<testCase name="Publicacao deve formatar o nome corretamente com crop ativado" duration="4" />
</file>
<file path="src/app/__tests__/CadastrarRotina.spec.tsx">
<testCase name="Cadastrar Rotina component renderiza corretamente" duration="64" />
<testCase name="Cadastrar Rotina component titulo com caracteres em excesso" duration="45" />
</file>
<file path="src/app/__tests__/CardIdoso.spec.tsx">
<testCase name="CardIdoso renderiza o componente CardIdoso com o nome correto" duration="96" />
<testCase name="CardIdoso navega para a edi&#xe7;&#xe3;o do Idoso ao pressionar o &#xed;cone de l&#xe1;pis" duration="5" />
<testCase name="CardIdoso seleciona o Idoso ao pressionar o componente CardIdoso" duration="3" />
</file>
<file path="src/app/__tests__/editarRotina.spec.tsx">
<testCase name="Testes editar rotina renders without crashing" duration="77" />
<testCase name="Testes editar rotina Rotina sem titulo" duration="37" />
<testCase name="Testes editar rotina Rotina com titulo muito grande e data errada" duration="32" />
</file>
<file path="src/app/__tests__/login-success.spec.tsx">
<testCase name="Login Component - Sucesso deve lidar com campos vazios e inv&#xe1;lidos" duration="57" />
<testCase name="Login Component - Sucesso deve lidar com senha inv&#xe1;lida" duration="17" />
</file>
<file path="src/app/__tests__/tutorial.spec.tsx">
<testCase name="O componente Tutorial deve renderizar corretamente" duration="121" />
<testCase name="O bot&#xe3;o &quot;Pular&quot; deve chamar a fun&#xe7;&#xe3;o &quot;router.replace&quot; com o caminho correto" duration="6" />
<testCase name="O bot&#xe3;o &quot;Avan&#xe7;ar&quot; deve permitir navegar entre os slides" duration="10" />
<testCase name="O bot&#xe3;o &quot;Avan&#xe7;ar&quot; deve permitir navegar entre os slides" duration="9" />
</file>
<file path="src/app/__tests__/perfil.spec.tsx">
<testCase name="Perfil renderiza corretamente" duration="94" />
<testCase name="Perfil renderiza corretamente com user id" duration="19" />
<testCase name="Perfil renderiza corretamente com user id e foto" duration="18" />
<testCase name="Perfil deve chamar logout" duration="108" />
<testCase name="Perfil deve chamar navigate" duration="105" />
</file>
<file path="src/app/__tests__/ModalConfirmation.spec.tsx">
<testCase name="ModalConfirmation deve renderizar corretamente quando vis&#xed;vel" duration="96" />
<testCase name="ModalConfirmation deve chamar a fun&#xe7;&#xe3;o de fechamento do modal ao pressionar &quot;Cancelar&quot;" duration="6" />
<testCase name="ModalConfirmation n&#xe3;o deve renderizar quando n&#xe3;o vis&#xed;vel" duration="2" />
</file>
<file path="src/app/__tests__/LinkButton.spec.tsx">
<testCase name="LinkButton deve renderizar corretamente" duration="20" />
<testCase name="LinkButton deve usar a cor de fundo personalizada" duration="3" />
<testCase name="LinkButton deve chamar a fun&#xe7;&#xe3;o de navega&#xe7;&#xe3;o corretamente" duration="3" />
</file>
<file path="src/app/__tests__/UploadImage.spec.tsx">
<testCase name="UploadImage renderiza corretamente sem imagem inicial" duration="90" />
<testCase name="UploadImage deve renderizar corretamente" duration="4" />
<testCase name="UploadImage escolher imagem e chamar setFoto corretamente" duration="54" />
</file>
<file path="src/app/__tests__/BarraPesquisa.spec.tsx">
<testCase name="BarraPesquisa deve renderizar corretamente" duration="85" />
<testCase name="BarraPesquisa deve chamar a fun&#xe7;&#xe3;o de retorno (callbackFn) com o valor do campo de pesquisa" duration="5" />
</file>
<file path="src/app/__tests__/BackButton.spec.tsx">
<testCase name="BackButton chama router.back() quando pressionado" duration="93" />
<testCase name="BackButton chama router.push() com a rota correta quando route &#xe9; fornecido" duration="3" />
</file>
<file path="src/app/__tests__/PublicacaoVisualizar.spec.tsx">
<testCase name="PublicacaoVisualizar n&#xe3;o deve renderizar a imagem do usu&#xe1;rio quando n&#xe3;o h&#xe1; foto" duration="87" />
<testCase name="PublicacaoVisualizar deve formatar a data corretamente" duration="3" />
</file>
<file path="src/app/__tests__/UploadImageV2.spec.tsx">
<testCase name="UploadImageV2 deve renderizar corretamente e chamar a fun&#xe7;&#xe3;o de callback ao selecionar uma imagem" duration="89" />
</file>
<file path="src/app/__tests__/MaskHour.spec.tsx">
<testCase name="MaskInput Component applies hour mask correctly" duration="90" />
</file>
<file path="src/app/__tests__/Loading.spec.tsx">
<testCase name="Loading deve renderizar o componente de carregamento corretamente" duration="81" />
</file>
<file path="src/app/__tests__/editarIdoso.spec.tsx">
<testCase name="EditarIdoso renderiza corretamente" duration="56" />
</file>
<file path="src/app/__tests__/index.spec.tsx">
<testCase name="Home renderiza corretamente" duration="29" />
<testCase name="Home deve conter um t&#xed;tulo" duration="4" />
<testCase name="Home deve conter bot&#xf5;es de a&#xe7;&#xe3;o" duration="3" />
</file>
<file path="src/app/__tests__/criaPublicacao.spec.tsx">
<testCase name="CriaPublicacao The component rendered" duration="49" />
</file>
<file path="src/app/components/__tests__/ModalConfirmation.spec.tsx">
<testCase name="ModalConfirmation Component renderiza corretamente" duration="94" />
</file>
<file path="src/app/__tests__/weekDay.spec.tsx">
<testCase name="Testes para WeekDays deve renderizar corretamente" duration="103" />
<testCase name="Testes para WeekDays deve chamar a fun&#xe7;&#xe3;o de callback corretamente ao pressionar um dia" duration="17" />
</file>
<file path="src/app/__tests__/CustomButton.spec.tsx">
<testCase name="CustomButton renderiza corretamente" duration="94" />
<testCase name="CustomButton Chama a fun&#xe7;&#xe3;o de callback quando pressionado" duration="3" />
</file>
<file path="src/app/__tests__/NaoAutenticado.spec.tsx">
<testCase name="NaoAutenticado deve renderizar o componente &apos;NaoAutenticado&apos; corretamente" duration="17" />
</file>
<file path="src/app/__tests__/layoutPages.spec.tsx">
<testCase name="Layouts renders PublicLayout correctly" duration="157" />
<testCase name="Layouts renders PrivateLayout correctly" duration="5" />
</file>
<file path="src/app/__tests__/visualizarPublicacao.spec.tsx">
<testCase name="Visualizar publicacao Rendeziza sem quebrar" duration="44" />
<testCase name="Visualizar publicacao displays actions correctly for admin" duration="16" />
</file>
<file path="src/app/__tests__/EmConstrucao.spec.tsx">
<testCase name="EmConstrucao component renders correctly" duration="93" />
</file>
<file path="src/app/__tests__/response.interface.spec.tsx">
<testCase name="IResponse Interface deve ser uma interface com as propriedades data e message" duration="2" />
</file>
<file path="src/app/__tests__/registros.spec.tsx">
<testCase name="Registros renderiza corretamente" duration="21" />
<testCase name="Registros renderiza corretamente com user id" duration="6" />
</file>
<file path="src/app/__tests__/rotinas.spec.tsx">
<testCase name="Rotinas renderiza corretamente" duration="27" />
<testCase name="Rotinas renderiza corretamente com user id" duration="9" />
</file>
<file path="src/app/__tests__/ItemTutorial.spec.tsx">
<testCase name="ItemTutorial renderiza corretamente" duration="100" />
</file>
<file path="src/app/__tests__/ErrorMessage.spec.tsx">
<testCase name="ErrorMessage renderiza corretamente" duration="87" />
</file>
<file path="src/app/__tests__/editarPublicacao.spec.tsx">
<testCase name="&lt;EditarPublicacao /&gt; renders without crashing" duration="38" />
</file>
<file path="src/app/__tests__/forum.spec.tsx">
<testCase name="Forum renderiza corretamente" duration="39" />
</file>
</testExecutions>